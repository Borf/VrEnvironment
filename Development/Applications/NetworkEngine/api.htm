<style>
body
{
	font-family: tahoma;
}
.code
{
    display: block;
    font-family: monospace;
    white-space: pre;
    margin: 1em 0;
    border: 1px solid black;	
}

.call
{
	margin-bottom: 100px;
	margin-top: 20px;
	margin-left: 5px;
	padding-left: 5px;
	border-left: 10px solid black;
	display: block;
}

.container
{
	overflow: auto;
}
h1
{
	text-align: center;
}

</style>
<h1>Network Protocol</h1>
<p>The network-engine is built upon the networking facilities of VrLib. Every VrLib application connects to a central server, and listens to commands from that server.</p>
<p>One of the features this server provides, is tunneling of data from one application to another. This is done through the central server, as this allows the connections to cross firewalls, NATs and other kinds of network obstructions. The network protocol of this vr-server is quite simple. Each packet consists of 4 bytes of the packetlength, in big endian, followed by the packet data. The packet data is a (valid) json object, with a field "id" that indicate the type of the packet, and a field "data" that contains the payload of the packet.</p>
<p>In order to get to another application, first you need to create a tunnel. This is done in the following steps:
	<ol>
		<li>Connect to the Vr Server on port 6666</li>
		<li>Send the following packet:
			<div class="code">{
	"id" : "session/list"
}
			</div>
			This structure is 27 bytes long, so prepend it with 0x18,0x00,0x00,0x00
		</li>
		<li>You should get a response in the same format, 4 bytes with the packet length, and then a json payload. 
			<div class="code">{
	"id" : "session/list",
	"data" : 
	[
		...
	]
}</div>
			The actual data returned depends on the applications connected, but will include an id field with a unique identifier. We'll need to find the session we're interested in and use this in the next step
		</li>
		<li>
			Send a tunnel/create command to create the tunnel. The data packet is like the following structure (key field is optional)
			<div class="code">{
	"id" : "tunnel/create",
	"data" :
	{
		"session" : "ce55ab4b-2743-4bf0-83fe-1cf0cfe02b03",
		"key" : ""
	}
}</div>
			You should get a packet back with the ID of this tunnel
			<div class="code">{
	"id" : "tunnel/create",
	"data" :
	{
		"status" : "ok",
		"id" : "2150373e-d796-4e3d-a2b7-c50be14feaa1"
	}
}</div>
			This ID is used to send data to the tunnel.
		</li>
		<li>
			To send a command through the tunnel, we can use the tunnel/send command:
			<div class="code">{
	"id" : "tunnel/send",
	"data" :
	{
		"dest" : "2150373e-d796-4e3d-a2b7-c50be14feaa1",
		"data" : 
		{
			"id" : "scene/reset",
			"data" : {}
		}
	}
}</div>
			This will send some data through this tunnel. The server won't send any response back on this, but the application might. If the application sends something through the tunnel, it will be the following structure:
<div class="code">{
	"id" : "tunnel/send",
	"data" :
	{
		"id" : "2150373e-d796-4e3d-a2b7-c50be14feaa1",
		"data" : 
		{
			"id" : "scene/node/movevto",
			"data" : 
			{
				"status" : "done"
			}
		}
	}
}</div>
		</li>
	</ol>
	A wireshark trace is provided for further reference
</p>
<p>After connecting to the network engine through the tunnel, you can send commands through the tunnel to change parts in the engine</p>
<p>All requests should send a response, with the same id. The general structure of a successful request is
<div class="code">{
	"id" : "packetid",
	"data" :
	{
		.....packetdata......
		"status" : "ok"
	}
</div>
	and a request with an error would be
<div class="code">{
	"id" : "packetid",
	"data" :
	{
		"status" : "error",
		"error" : "error description"
	}
</div>
	these status/errors are not mentioned in the API documentation, but have a seperate block with error messages
</p>
<h1>Commands</h1>
<ul>
	<li>scene
	<ul>
		<li><a href="#scene/get">scene/get</a></li>
		<li><a href="#scene/save">scene/save</a></li>
		<li><a href="#scene/load">scene/load</a></li>
		<li><a href="#scene/raycast">scene/raycast</a></li>
		<li>node<ul>
			<li><a href="#scene/node/add">scene/node/add</a></li>
			<li><a href="#scene/node/moveto">scene/node/moveto</a></li>
			<li><a href="#scene/node/update">scene/node/update</a></li>
			<li><a href="#scene/node/delete">scene/node/delete</a></li>
			<li><a href="#scene/node/addlayer">scene/node/addlayer</a></li>
			<li><a href="#scene/node/dellayer">scene/node/dellayer</a></li>
			<li><a href="#scene/node/find">scene/node/find</a></li>
		</ul></li>
		<li>terrain<ul>
			<li><a href="#scene/terrain/add">scene/terrain/add</a></li>
			<li><a href="#scene/terrain/update">scene/terrain/update</a></li>
			<li><a href="#scene/terrain/delete">scene/terrain/delete</a></li>
			<li><a href="#scene/terrain/getheight">scene/terrain/getheight</a></li>
		</ul></li>
		<li>panel<ul>
			<li><a href="#scene/panel/clear">scene/panel/clear</a></li>
			<li><a href="#scene/panel/drawlines">scene/panel/drawlines</a></li>
			<li><a href="#scene/panel/drawtext">scene/panel/drawtext</a></li>
			<li><a href="#scene/panel/setclearcolor">scene/panel/setclearcolor</a></li>
			<li><a href="#scene/panel/swap">scene/panel/sawp</a></li>
		</ul></li>
		<li>skybox<ul>
			<li><a href="#scene/skybox/settime">scene/skybox/settime</a></li>
			<li><a href="#scene/skybox/update">scene/skybox/update</a></li>
		</ul></li>	
		<li>road<ul>
			<li><a href="#scene/road/add">scene/road/add</a></li>
			<li><a href="#scene/road/delete">scene/road/delete</a></li>
		</ul></li>	
	</ul></li>
	<li>route
	<ul>
		<li><a href="#route/add">route/add</a></li>
		<li><a href="#route/update">route/update</a></li>
		<li><a href="#route/delete">route/delete</a></li>
		<li><a href="#route/follow">route/follow</a></li>
		<li><a href="#route/show">route/show</a></li>
	</ul></li>
	<li><a href="#get">get</a></li>
	<li><a href="#setcallback">setcallback</a></li>
	<li><a href="#play">play</a></li>
	<li><a href="#pause">pause</a></li>
</ul>


<div class="container">

	<h1>scene</h1>

	<div class="call" id="scene/get">
		<h2>scene/get</h2>
		gets a json structure of the scene
<div class="code">{
	"id" : "scene/get"
}
</div>
		Response
<div class="code">{
	"data" : {scene data}
}</div>
		Errors:
		<ul>
			<li></li>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/save">
		<h2>scene/save</h2>
		saves the scene to a file. filename parameter indicates the filename, overwrite indicates if the file should be overwritten. if overwrite is not specified, or is false, the file will not be overwritten but an error will be returned
<div class="code">{
	"id" : "scene/save",
	"data" :
	{
		"filename" : "cookie.json",
		"overwrite" : false
	}
}
</div>
		Response
<div class="code">{
	"id" : "scene/save",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
			<li>File Exists: The file exists and the overwrite flag is set to false</li>
			<li>Error saving: an unspecified error occurred while saving (disk full, file in use)</li>
		</ul>
	</div>

<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="scene/load">
		<h2>scene/load</h2>
		loads the scene from a file
<div class="code">{
	"id" : "scene/load",
	"data" :
	{
		"filename" : "cookie.json"
	}
}
</div>
		Response
<div class="code">{
	"id" : "scene/load",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
			<li>File does not exist: Could not find the file with the filename specified</li>
			<li>Invalid file: the file is not a valid scene file</li>
		</ul>
	</div>



	<div class="call" id="scene/raycast">
		<h2>scene/raycast</h2>
		Casts a ray through the scene, and returns an array of collision points. Physics indicate if the ray should be cast by the physics engine or by the internal polygon structure (slower)
<div class="code">{
	"id" : "scene/raycast",
	"data" : 
	{
		"start" : [ 0, 0, 0 ],
		"direction" : [ 0, 1, 0 ],
		"physics" : true
	}
}
</div>
		Response
<div class="code">{
	"status" : "ok",
	"data" :
	[
		[ 0, 0.4, 0 ],
		[ 0, 0.6, 0 ],
		[ 0, 1.4, 0 ],
		[ 0, 1.6, 0 ]
	]
}</div>
		Errors:
		<ul>
		</ul>
	</div>

<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

<h1>scene/node</h1>

	<div class="call" id="scene/node/add">
		<h2>scene/node/add</h2>
		Adds a node to the scene. Returns the guid of the newly created node.<br />
		name is a mandatory field, parent is optional. Also all fields in components are optional<br />
		Transform indicates the position of the new node. Transformation is relative to parent, including scaling<br/>
		Model indicates a modelrenderer is attached to this node. Optional cullbackfaces indicates the backfaces are not being drawn (default), Optional animated indicates if the animations should be loaded (default no). If animated, the default animation can be set with the animation field<br/>
		Terrain indicates a terrain renderer. Terrain should be added first with scene/terrain/add API<br/>
		Panel creates a virtual drawing panel that can be drawn on. ID can be used for scene/panel/* API calls<br />
		Water creates a sheet of water. Uses a default environment reflection map for now. Size indicates the size of the water quad, resolution indicates the number of quads used. Size 10,10 and resolution 0.1 results in 10000 polygons
<div class="code">{
	"id" : "scene/node/add",
	"data" : 
	{
		"name" : "name",
		"parent" : "guid",
		"components" :
		{
			"transform" : 
			{
				"position" : [ 0, 0, 0 ],
				"scale" : 1,
				"rotation" : [ 0, 0, 0 ]
			},
			"model" : 
			{
				"file" : "filename",
				"cullbackfaces" : true,
				"animated" : false,
				"animation" : "animationname"
			},
			"terrain" : 
			{
				"smoothnormals" : true
			},
			"panel" :
			{
				"size" : [ 1, 1 ],
				"resolution" : [ 512, 512 ],
				"background" : [ 1, 1, 1, 1]
			},
			"water" :
			{
				"size" : [ 20, 20 ],
				"resolution" : 0.1
			}
		}
	}
}
</div>
		Response
<div class="code">{
	"id" : "scene/node/add",
	"data" :
	{
		"uuid" : "guid",
		"name" : "name"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>

<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/node/update">
		<h2>scene/node/update</h2>
		Updates one ore more properties of a node. id in the data field is mandatory, other fields are optional
<div class="code">{
	"id" : "scene/node/update",
	"data" :
	{
		"id" : {guid},
		"parent" : {guid},
		"transform" :
		{
			"position" : [ 0, 0, 0 ],
			"scale" : 1.0,
			"rotation" : [ 0, 0, 0 ],
		},
		"animation" :
		{
			"name" : "walk",
			"speed" : 0.5
		}
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/node/update",
	"data" :
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/node/moveto">
		<h2>scene/node/moveto</h2>
		Use either time or speed!
		if stop is set, the moveto gets stopped, no more callback
<div class="code">{
	"id" : "scene/node/moveto",
	"data" :
	{
		"id" : {guid},
		"stop" : "stop",
		"position" : [ 0, 0, 0 ],
		"rotate" : "XY",
		"interpolate" : "linear",
		"followheight" : false,
		"speed" : 10,
		"time" : 1
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/node/moveto",
	"data" :
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="scene/node/delete">
		<h2>scene/node/delete</h2>

<div class="code">{
	"id" : "scene/node/delete",
	"data" :
	{
		"id" : {guid}
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/node/delete",
	"data" :
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


	<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="scene/node/find">
		<h2>scene/node/find</h2>

<div class="code">{
	"id" : "scene/node/find",
	"data" :
	{
		"name" : {name}
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/road/delete",
	"data" :
	[
...node info...
	]
</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
	<div class="call" id="scene/node/addlayer">
		<h2>scene/node/addlayer</h2>
		Adds a texture layer on top of a terrain. The texture is repeated over the terrain, and is only visible between heights between minHeight and maxHeight. After those heights the texture fades out after fadeDist distance
<div class="code">{
	"id" : "scene/node/addlayer",
	"data" :
	{
		"id" : {uuid},
		"diffuse" : {texture.png},
		"normal" : {texture.png},
		"minHeight" : 0,
		"maxHeight" : 10,
		"fadeDist" : 1
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/node/addlayer",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/node/dellayer">
		<h2>scene/node/dellayer</h2>

<div class="code">{
	"id" : "scene/node/dellayer",
	"data" :
	{
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/node/dellayer",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>

<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<h1>scene/panel</h1>
	<p>Panels are virtual drawing boards in the VR scene. Basically it's a rectangle with a texture stuck on it, where the texture can be drawn on. This quad is double-buffered, meaning your drawings won't show up until the buffers are swapped.</p>

	<div class="call" id="scene/panel/clear">
		<h2>scene/panel/clear</h2>
		Clears the contents of the panel to the background color. Should be used before drawing anything on it. id should be the uuid of the node with the panel
		<div class="code">{
	"id" : "scene/panel/clear",
	"data" :
	{
			"id" : "uuid"
	}
}
		</div>
		Response
		<div class="code">{
	"id" : "route/panel/clear",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
			<li>id not found: the ID field is not in the json structure</li>
			<li>node not found: the node with this id is not found</li>
			<li>panel component not found: the node with this ID does not have a panel component</li>
		</ul>
	</div>
<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
	<div class="call" id="scene/panel/swap">
		<h2>scene/panel/swap</h2>
		Swaps the buffers for this panel. id should be the uuid of the node of the panel to be cleared
		<div class="code">{
	"id" : "scene/panel/swap",
	"data" :
	{
			"id" : "uuid"
	}
}
		</div>
		Response
		<div class="code">{
	"id" : "route/panel/swap",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
			<li>id not found: the ID field is not in the json structure</li>
			<li>node not found: the node with this id is not found</li>
			<li>panel component not found: the node with this ID does not have a panel component</li>
		</ul>
	</div>
<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
	<div class="call" id="scene/panel/drawlines">
		<h2>scene/panel/drawlines</h2>
		Draws multiple multiple lines on the the backbuffer for this panel. Lines can have different colors, but all share the same width. id should be the uuid of the node of the panel
		<div class="code">{
	"id" : "scene/panel/drawlines",
	"data" :
	{
		"id" : "uuid",
		"width" : 1,
		lines : 
		[
			0,0, 10,10, 0,0,0,1, // x1,y1, x2,y2, r,g,b,a
			0,0, 100,10, 0,0,0,1, // x1,y1, x2,y2, r,g,b,a
		]
	}
}
		</div>
		Response
		<div class="code">{
	"id" : "route/panel/drawlines",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
			<li>id not found: the ID field is not in the json structure</li>
			<li>node not found: the node with this id is not found</li>
			<li>panel component not found: the node with this ID does not have a panel component</li>
		</ul>
	</div>



<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
	<div class="call" id="scene/panel/setclearcolor">
		<h2>scene/panel/setclearcolor</h2>
		Changes the clear color. Color values are in the range of 0 - 1 (0,0,0 is black, 1,1,1 is white), fourth value is alpha value, 0 is transparent, 1 is opaque
		<div class="code">{
	"id" : "scene/panel/setclearcolor",
	"data" :
	{
		"id" : {panelid},
		"color" : [ 1,1,1,1 ]
	}
}
		</div>
		Response
		<div class="code">{
	"id" : "route/panel/setclearcolor",
	"data" :
	{
			"status" : "ok"
	}
}</div>
		Errors:
		<ul>
			<li>id not found: the ID field is not in the json structure</li>
			<li>node not found: the node with this id is not found</li>
			<li>panel component not found: the node with this ID does not have a panel component</li>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
	<div class="call" id="scene/panel/drawtext">
		<h2>scene/panel/drawtext</h2>
		Draws a text on the panel. size, color and font are optional. Font is the name of a ttf font file, found in c:\windows\fonts. A texture is loaded per font/size, so don't use too many different fonts or sizes
		<div class="code">{
	"id" : "scene/panel/drawtext",
	"data" :
	{
		"id" : {panelid},
		"text" : "Hello World",
		"position" : [ 100.0, 100.0 ],
		"size" : 32.0,
		"color" : [ 0,0,0,1 ],
		"font" : "segoeui"
	}
}
		</div>
		Response
		<div class="code">{
	"id" : "route/panel/drawtext",
	"data" :
	{
			"status" : "ok"
	}
}</div>
		Errors:
		<ul>
			<li>id not found: the ID field is not in the json structure</li>
			<li>node not found: the node with this id is not found</li>
			<li>panel component not found: the node with this ID does not have a panel component</li>
			<li>font not found: the font file was not found</li>
		</ul>
	</div>



	<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->



<h1>scene/terrain</h1>

	<div class="call" id="scene/terrain/add">
		<h2>scene/terrain/add</h2>
		Adds a terrain to the engine. This terrain has an id, although only one terrain can be loaded at this time. 
<div class="code">{
	"id" : "scene/terrain/add",
	"data" :
	{
		"size" : [ 256, 256 ],
		"heights" : [ 0, 0, 0, ...... 0, 0, 0 ], // 65536 values
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/terrain/add",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/terrain/update">
		<h2>scene/terrain/update</h2>

<div class="code">{
	"id" : "scene/terrain/update",
	"data" :
	{
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/terrain/update",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/terrain/delete">
		<h2>scene/terrain/delete</h2>

<div class="code">{
	"id" : "scene/terrain/delete",
	"data" :
	{
		
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/terrain/delete",
	"data" :
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/terrain/getheight">
		<h2>scene/terrain/getheight</h2>
		Gets a single height or multiple heights from the heightmap. Positions are mapped according to the position of the terrain rendering node.
<div class="code">{
	"id" : "scene/terrain/getheight",
	"data" :
	{
		"position" : [ 10.2, 4.4 ],
		"positions" : 
		[
			[ 10.2, 4.4 ],
			[ 11.2, 4.4 ],
			[ 12.2, 4.4 ]
		]
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/terrain/getheight",
	"data" :
	{
		"status" : "ok",
		"height" : 10.3,
		"heights" : [ 10.3, 10.4, 10.4]
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
<h1>scene/skybox</h1>

	<div class="call" id="scene/skybox/settime">
		<h2>scene/skybox/settime</h2>
		Sets the time of the sky, if the skybox is set to the dynamic skybox. Time value ranges from 0 to 24. 12.5 is equal to 12:30
<div class="code">{
	"id" : "scene/skybox/settime",
	"data" :
	{
		"time" : 12
	}
}
</div>
		Response
<div class="code">{
	"id" : "scene/skybox/settime",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="scene/skybox/update">
		<h2>scene/skybox/update</h2>
		Updates or changes the skybox. Type can be 'static' or 'dynamic'. If set to dynamic, a default dynamic skybox with sun and moon will be used. If set to static, a static version will be used, with 6 seperate images in a cubemap.
<div class="code">{
	"id" : "scene/skybox/update",
	"data" :
	{
		"type" : "static",
		"files" :
		{
			"xpos" : "data/NetworkEngine/textures/SkyBoxes/interstellar/interstellar_rt.png",
			"xneg" : "data/NetworkEngine/textures/SkyBoxes/interstellar/interstellar_lf.png",
			"ypos" : "data/NetworkEngine/textures/SkyBoxes/interstellar/interstellar_up.png",
			"yneg" : "data/NetworkEngine/textures/SkyBoxes/interstellar/interstellar_dn.png",
			"zpos" : "data/NetworkEngine/textures/SkyBoxes/interstellar/interstellar_bk.png",
			"zneg" : "data/NetworkEngine/textures/SkyBoxes/interstellar/interstellar_ft.png"
		}
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/skybox/update",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
<h1>scene/road</h1>
	<div class="call" id="scene/road/add">
		<h2>scene/road/add</h2>

<div class="code">{
	"id" : "scene/road/add",
	"data" :
	{
		"route" : "route uuid"
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/road/add",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->


	<div class="call" id="scene/road/delete">
		<h2>scene/road/delete</h2>

<div class="code">{
	"id" : "scene/road/delete",
	"data" :
	{
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/road/delete",
	"data" :
	{
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
<h1>route</h1>

	<div class="call" id="route/add">
		<h2>route/add</h2>
		Adds a route to the engine. A route is a virtual concept and is not visible to the user, unless debug drawing is turned on. Can be used to let nodes follow it
<div class="code">{
	"id" : "route/add",
	"data" :
	{
		"nodes" : 
		[
			{	"pos" : [ 0, 0, 0  ],	"dir" :		[ 5, 0, -5]	},
			{	"pos" : [ 50, 0, 0 ],	"dir" :		[ 5, 0, 5]		},
			{	"pos" : [ 50, 0, 50],	"dir" :		[ -5, 0, 5]	},
			{	"pos" : [ 0, 0, 50 ],	"dir" :		[ -5, 0, -5]	},
		]
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/add",
	"data" :
	{
		"status" : "ok",
		"uuid" : "uuid"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="route/update">
		<h2>route/update</h2>

<div class="code">{
	"id" : "route/update",
	"data" :
	{
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/update",
	"data" : 
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="route/delete">
		<h2>route/delete</h2>
		Deletes a route
<div class="code">{
	"id" : "route/delete",
	"data" :
	{
		"id" : "uuid"
	}
}
</div>
		Response
<div class="code">{
	"id" : "route/delete",
	"data" :
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>

<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="route/follow">
		<h2>route/follow</h2>
		Makes a node follow a route. Rotation can be "NONE", "XZ" or "XYZ". offset is to offset a node on the route
<div class="code">{
	"id" : "route/follow",
	"data" :
	{
		"route" : {routeid},
		"node" : {nodeid},
		"speed" : 1.0,
		"offset" : 0.0,
		"rotate" : "XZ",
		"followHeight" : false,
		"rotateOffset" : [ 0, 0, 0 ],
		"positionOffset" : [ 0, 0, 0]
	}
}
</div>
		Response
<div class="code">{
	"status" : "ok"
}</div>
		Errors:
		<ul>
			<li>Route not found</li>
			<li>Node not found</li>
		</ul>
	</div>
<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->
	<div class="call" id="route/follow">
		<h2>route/show</h2>
		shows or hides all routes (the red line). If show parameter is not set, it toggles the visibility
<div class="code">{
	"id" : "route/show",
	"data" :
	{
		"show" : false
	}
}
</div>
		Response
<div class="code">{
	"status" : "ok"
}</div>
		Errors:
		<ul>
		</ul>
	</div>
<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->



	<div class="call" id="get">
		<h2>get</h2>
			Gets information about a certain part of the VR engine. Type can be head, handleft, handright, button. If type is button, extra fields 'button' and 'hand' are used to select the button to read out. hand can be left or right, button can be trigger, thumbpad, application, grip
<div class="code">{
	"id" : "get",
	"data" :
	{
		"type" : "head"
	}
}
</div>
		Response
<div class="code">{
	"id" : "get",
	"data" : 
	{
		"status" : "ok",
		"position" : [ 0, 0, 0 ],
		"direction" : [ 0, 0, -1 ]
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="setcallback">
		<h2>setcallback</h2>
			Sets a callback on certain events. <br />
		type can be button<br />
		button can be trigger, thumbpad, application or grip<br />
		hand can be left or right
<div class="code">{
	"id" : "setcallback",
	"data" :
	{
		"type" : "button",
		"button" : "trigger",
		"hand" : "left"
	}
}
</div>
		Response
<div class="code">{
	"id" : "setcallback",
	"data" : 
	{
		"status" : "ok"
	}
}</div>
		Errors:
		<ul>
		</ul>
	</div>



<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="play">
		<h2>play</h2>
		Sets the engine to run if paused. 
<div class="code">{
	"id" : "play",
	"data" :
	{
	}
}
</div>
		Response
<div class="code">{
	"status" : "ok"
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->

	<div class="call" id="pause">
		<h2>pause</h2>
		Pauses the rendering engine. Will make the screen turn dark
<div class="code">{
	"id" : "pause",
	"data" :
	{
	}
}
</div>
		Response
<div class="code">{
	"status" : "ok"
}</div>
		Errors:
		<ul>
		</ul>
	</div>


<!-- ---------------------------------------------------------------------------------------------------------------------------------------------- -->






</div>